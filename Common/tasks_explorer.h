/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _TASKS_EXPLORER_H_RPCGEN
#define _TASKS_EXPLORER_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>

#define MAX_TASKS 2048
#define MAX_PATH 1024
#define MAX_PARAMS_LEN 32767
#define MAX_ENV_RECORD 32767
#define MAX_APP_DESCR 1024

typedef struct {
	u_int tasks_list_len;
	int *tasks_list_val;
} tasks_list;
#ifdef __cplusplus
extern "C" bool_t xdr_tasks_list(XDR *, tasks_list*);
#elif __STDC__
extern  bool_t xdr_tasks_list(XDR *, tasks_list*);
#else /* Old Style C */
bool_t xdr_tasks_list();
#endif /* Old Style C */


typedef char *command_line;
#ifdef __cplusplus
extern "C" bool_t xdr_command_line(XDR *, command_line*);
#elif __STDC__
extern  bool_t xdr_command_line(XDR *, command_line*);
#else /* Old Style C */
bool_t xdr_command_line();
#endif /* Old Style C */


typedef char *app_descr;
#ifdef __cplusplus
extern "C" bool_t xdr_app_descr(XDR *, app_descr*);
#elif __STDC__
extern  bool_t xdr_app_descr(XDR *, app_descr*);
#else /* Old Style C */
bool_t xdr_app_descr();
#endif /* Old Style C */


typedef char *env_type;
#ifdef __cplusplus
extern "C" bool_t xdr_env_type(XDR *, env_type*);
#elif __STDC__
extern  bool_t xdr_env_type(XDR *, env_type*);
#else /* Old Style C */
bool_t xdr_env_type();
#endif /* Old Style C */


typedef struct env_node *env_list;
#ifdef __cplusplus
extern "C" bool_t xdr_env_list(XDR *, env_list*);
#elif __STDC__
extern  bool_t xdr_env_list(XDR *, env_list*);
#else /* Old Style C */
bool_t xdr_env_list();
#endif /* Old Style C */


struct env_node {
	env_type name;
	env_list next;
};
typedef struct env_node env_node;
#ifdef __cplusplus
extern "C" bool_t xdr_env_node(XDR *, env_node*);
#elif __STDC__
extern  bool_t xdr_env_node(XDR *, env_node*);
#else /* Old Style C */
bool_t xdr_env_node();
#endif /* Old Style C */


typedef char *file_name;
#ifdef __cplusplus
extern "C" bool_t xdr_file_name(XDR *, file_name*);
#elif __STDC__
extern  bool_t xdr_file_name(XDR *, file_name*);
#else /* Old Style C */
bool_t xdr_file_name();
#endif /* Old Style C */


typedef struct files_list_node *files_list;
#ifdef __cplusplus
extern "C" bool_t xdr_files_list(XDR *, files_list*);
#elif __STDC__
extern  bool_t xdr_files_list(XDR *, files_list*);
#else /* Old Style C */
bool_t xdr_files_list();
#endif /* Old Style C */


struct files_list_node {
	file_name name;
	files_list next;
};
typedef struct files_list_node files_list_node;
#ifdef __cplusplus
extern "C" bool_t xdr_files_list_node(XDR *, files_list_node*);
#elif __STDC__
extern  bool_t xdr_files_list_node(XDR *, files_list_node*);
#else /* Old Style C */
bool_t xdr_files_list_node();
#endif /* Old Style C */


struct host_info_dynamic {
	u_int cpu_kernel;
	u_int cpu_user;
};
typedef struct host_info_dynamic host_info_dynamic;
#ifdef __cplusplus
extern "C" bool_t xdr_host_info_dynamic(XDR *, host_info_dynamic*);
#elif __STDC__
extern  bool_t xdr_host_info_dynamic(XDR *, host_info_dynamic*);
#else /* Old Style C */
bool_t xdr_host_info_dynamic();
#endif /* Old Style C */


struct task_info_base {
	u_int pid;
	u_int ppid;
	char name[64];
	char user[64];
	u_int cputype;
	char path_to_boundle[MAX_PATH];
	char path_to_executable[MAX_PATH];
	char path_to_icon[MAX_PATH];
	char bundle_ver[64];
	char bundle_copyright[1024];
};
typedef struct task_info_base task_info_base;
#ifdef __cplusplus
extern "C" bool_t xdr_task_info_base(XDR *, task_info_base*);
#elif __STDC__
extern  bool_t xdr_task_info_base(XDR *, task_info_base*);
#else /* Old Style C */
bool_t xdr_task_info_base();
#endif /* Old Style C */


typedef task_info_base task_info_base_t;
#ifdef __cplusplus
extern "C" bool_t xdr_task_info_base_t(XDR *, task_info_base_t*);
#elif __STDC__
extern  bool_t xdr_task_info_base_t(XDR *, task_info_base_t*);
#else /* Old Style C */
bool_t xdr_task_info_base_t();
#endif /* Old Style C */


struct task_info_dynamic {
	u_int threads;
	u_int ports;
	u_int real_mem_size;
	u_int virtual_mem_size;
	float cpu_usage_total;
	float cpu_usage_user;
	float cpu_usage_kernel;
};
typedef struct task_info_dynamic task_info_dynamic;
#ifdef __cplusplus
extern "C" bool_t xdr_task_info_dynamic(XDR *, task_info_dynamic*);
#elif __STDC__
extern  bool_t xdr_task_info_dynamic(XDR *, task_info_dynamic*);
#else /* Old Style C */
bool_t xdr_task_info_dynamic();
#endif /* Old Style C */


typedef struct thread_info_node *thread_info_list;
#ifdef __cplusplus
extern "C" bool_t xdr_thread_info_list(XDR *, thread_info_list*);
#elif __STDC__
extern  bool_t xdr_thread_info_list(XDR *, thread_info_list*);
#else /* Old Style C */
bool_t xdr_thread_info_list();
#endif /* Old Style C */


struct thread_info_node {
	u_int run_state;
	u_int user_time;
	u_int system_time;
	u_int suspend_count;
	u_int sleep_time;
	u_int flags;
	char *entry_point_name;
	u_long thread_id;
	thread_info_list next;
};
typedef struct thread_info_node thread_info_node;
#ifdef __cplusplus
extern "C" bool_t xdr_thread_info_node(XDR *, thread_info_node*);
#elif __STDC__
extern  bool_t xdr_thread_info_node(XDR *, thread_info_node*);
#else /* Old Style C */
bool_t xdr_thread_info_node();
#endif /* Old Style C */


typedef struct stack_info_node *stack_info_list;
#ifdef __cplusplus
extern "C" bool_t xdr_stack_info_list(XDR *, stack_info_list*);
#elif __STDC__
extern  bool_t xdr_stack_info_list(XDR *, stack_info_list*);
#else /* Old Style C */
bool_t xdr_stack_info_list();
#endif /* Old Style C */


struct stack_info_node {
	u_long return_addr;
	u_long frame_addr;
	char *func_name;
	stack_info_list next;
};
typedef struct stack_info_node stack_info_node;
#ifdef __cplusplus
extern "C" bool_t xdr_stack_info_node(XDR *, stack_info_node*);
#elif __STDC__
extern  bool_t xdr_stack_info_node(XDR *, stack_info_node*);
#else /* Old Style C */
bool_t xdr_stack_info_node();
#endif /* Old Style C */


struct call_stack_request {
	u_int pid;
	u_long tid;
};
typedef struct call_stack_request call_stack_request;
#ifdef __cplusplus
extern "C" bool_t xdr_call_stack_request(XDR *, call_stack_request*);
#elif __STDC__
extern  bool_t xdr_call_stack_request(XDR *, call_stack_request*);
#else /* Old Style C */
bool_t xdr_call_stack_request();
#endif /* Old Style C */


#define TASK_EXPLORER_PROG ((rpc_uint)1)
#define TASK_EXPLORER ((rpc_uint)1)

#ifdef __cplusplus
#define TASK_EXPLORER_INIT ((rpc_uint)1)
extern "C" int * task_explorer_init_1(void *, CLIENT *);
extern "C" int * task_explorer_init_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_FREE ((rpc_uint)2)
extern "C" int * task_explorer_free_1(void *, CLIENT *);
extern "C" int * task_explorer_free_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_UPDATE ((rpc_uint)3)
extern "C" host_info_dynamic * task_explorer_update_1(void *, CLIENT *);
extern "C" host_info_dynamic * task_explorer_update_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_TASKS_LIST ((rpc_uint)5)
extern "C" tasks_list * task_explorer_tasks_list_1(void *, CLIENT *);
extern "C" tasks_list * task_explorer_tasks_list_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_BASE_INFO ((rpc_uint)6)
extern "C" task_info_base * task_explorer_base_info_1(int *, CLIENT *);
extern "C" task_info_base * task_explorer_base_info_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_PARAMS ((rpc_uint)7)
extern "C" command_line * task_explorer_params_1(int *, CLIENT *);
extern "C" command_line * task_explorer_params_1_svc(int *, struct svc_req *);
#define KILL_PROCESS ((rpc_uint)8)
extern "C" int * kill_process_1(int *, CLIENT *);
extern "C" int * kill_process_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_ENV_LIST ((rpc_uint)9)
extern "C" env_list * task_explorer_env_list_1(int *, CLIENT *);
extern "C" env_list * task_explorer_env_list_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_DYNINFO ((rpc_uint)10)
extern "C" task_info_dynamic * task_explorer_dyninfo_1(int *, CLIENT *);
extern "C" task_info_dynamic * task_explorer_dyninfo_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_FILES_LIST ((rpc_uint)11)
extern "C" files_list * task_explorer_files_list_1(int *, CLIENT *);
extern "C" files_list * task_explorer_files_list_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_APP_DESCR ((rpc_uint)12)
extern "C" app_descr * task_explorer_app_descr_1(int *, CLIENT *);
extern "C" app_descr * task_explorer_app_descr_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_THREADS_INFO ((rpc_uint)13)
extern "C" thread_info_list * task_explorer_threads_info_1(int *, CLIENT *);
extern "C" thread_info_list * task_explorer_threads_info_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_STACK_FOR_THREAD ((rpc_uint)14)
extern "C" stack_info_list * task_explorer_stack_for_thread_1(struct call_stack_request *, CLIENT *);
extern "C" stack_info_list * task_explorer_stack_for_thread_1_svc(struct call_stack_request *, struct svc_req *);

#elif __STDC__
#define TASK_EXPLORER_INIT ((rpc_uint)1)
extern  int * task_explorer_init_1(void *, CLIENT *);
extern  int * task_explorer_init_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_FREE ((rpc_uint)2)
extern  int * task_explorer_free_1(void *, CLIENT *);
extern  int * task_explorer_free_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_UPDATE ((rpc_uint)3)
extern  host_info_dynamic * task_explorer_update_1(void *, CLIENT *);
extern  host_info_dynamic * task_explorer_update_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_TASKS_LIST ((rpc_uint)5)
extern  tasks_list * task_explorer_tasks_list_1(void *, CLIENT *);
extern  tasks_list * task_explorer_tasks_list_1_svc(void *, struct svc_req *);
#define TASK_EXPLORER_BASE_INFO ((rpc_uint)6)
extern  task_info_base * task_explorer_base_info_1(int *, CLIENT *);
extern  task_info_base * task_explorer_base_info_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_PARAMS ((rpc_uint)7)
extern  command_line * task_explorer_params_1(int *, CLIENT *);
extern  command_line * task_explorer_params_1_svc(int *, struct svc_req *);
#define KILL_PROCESS ((rpc_uint)8)
extern  int * kill_process_1(int *, CLIENT *);
extern  int * kill_process_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_ENV_LIST ((rpc_uint)9)
extern  env_list * task_explorer_env_list_1(int *, CLIENT *);
extern  env_list * task_explorer_env_list_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_DYNINFO ((rpc_uint)10)
extern  task_info_dynamic * task_explorer_dyninfo_1(int *, CLIENT *);
extern  task_info_dynamic * task_explorer_dyninfo_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_FILES_LIST ((rpc_uint)11)
extern  files_list * task_explorer_files_list_1(int *, CLIENT *);
extern  files_list * task_explorer_files_list_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_APP_DESCR ((rpc_uint)12)
extern  app_descr * task_explorer_app_descr_1(int *, CLIENT *);
extern  app_descr * task_explorer_app_descr_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_THREADS_INFO ((rpc_uint)13)
extern  thread_info_list * task_explorer_threads_info_1(int *, CLIENT *);
extern  thread_info_list * task_explorer_threads_info_1_svc(int *, struct svc_req *);
#define TASK_EXPLORER_STACK_FOR_THREAD ((rpc_uint)14)
extern  stack_info_list * task_explorer_stack_for_thread_1(struct call_stack_request *, CLIENT *);
extern  stack_info_list * task_explorer_stack_for_thread_1_svc(struct call_stack_request *, struct svc_req *);

#else /* Old Style C */
#define TASK_EXPLORER_INIT ((rpc_uint)1)
extern  int * task_explorer_init_1();
extern  int * task_explorer_init_1_svc();
#define TASK_EXPLORER_FREE ((rpc_uint)2)
extern  int * task_explorer_free_1();
extern  int * task_explorer_free_1_svc();
#define TASK_EXPLORER_UPDATE ((rpc_uint)3)
extern  host_info_dynamic * task_explorer_update_1();
extern  host_info_dynamic * task_explorer_update_1_svc();
#define TASK_EXPLORER_TASKS_LIST ((rpc_uint)5)
extern  tasks_list * task_explorer_tasks_list_1();
extern  tasks_list * task_explorer_tasks_list_1_svc();
#define TASK_EXPLORER_BASE_INFO ((rpc_uint)6)
extern  task_info_base * task_explorer_base_info_1();
extern  task_info_base * task_explorer_base_info_1_svc();
#define TASK_EXPLORER_PARAMS ((rpc_uint)7)
extern  command_line * task_explorer_params_1();
extern  command_line * task_explorer_params_1_svc();
#define KILL_PROCESS ((rpc_uint)8)
extern  int * kill_process_1();
extern  int * kill_process_1_svc();
#define TASK_EXPLORER_ENV_LIST ((rpc_uint)9)
extern  env_list * task_explorer_env_list_1();
extern  env_list * task_explorer_env_list_1_svc();
#define TASK_EXPLORER_DYNINFO ((rpc_uint)10)
extern  task_info_dynamic * task_explorer_dyninfo_1();
extern  task_info_dynamic * task_explorer_dyninfo_1_svc();
#define TASK_EXPLORER_FILES_LIST ((rpc_uint)11)
extern  files_list * task_explorer_files_list_1();
extern  files_list * task_explorer_files_list_1_svc();
#define TASK_EXPLORER_APP_DESCR ((rpc_uint)12)
extern  app_descr * task_explorer_app_descr_1();
extern  app_descr * task_explorer_app_descr_1_svc();
#define TASK_EXPLORER_THREADS_INFO ((rpc_uint)13)
extern  thread_info_list * task_explorer_threads_info_1();
extern  thread_info_list * task_explorer_threads_info_1_svc();
#define TASK_EXPLORER_STACK_FOR_THREAD ((rpc_uint)14)
extern  stack_info_list * task_explorer_stack_for_thread_1();
extern  stack_info_list * task_explorer_stack_for_thread_1_svc();
#endif /* Old Style C */

#endif /* !_TASKS_EXPLORER_H_RPCGEN */
